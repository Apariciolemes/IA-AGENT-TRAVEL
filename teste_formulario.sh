#!/bin/bash

echo "üß™ TESTE DO FORMUL√ÅRIO DE BUSCA"
echo "================================"
echo ""

# Cores
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üìã Testando diferentes cen√°rios de busca...${NC}"
echo ""

# Teste 1: Busca simples (s√≥ ida)
echo -e "${YELLOW}1. Busca Simples - GRU ‚Üí REC (s√≥ ida)${NC}"
echo "   Par√¢metros: origem=GRU, destino=REC, data=2025-12-15, 1 adulto"
echo ""

response=$(curl -s -X POST http://localhost:8000/api/v1/search \
  -H "Content-Type: application/json" \
  -d '{
    "origin": "GRU",
    "destination": "REC", 
    "out_date": "2025-12-15",
    "pax": {"adults": 1},
    "cabin": "ECONOMY"
  }')

if [[ $response == *"ranked"* ]]; then
    echo -e "   ${GREEN}‚úì SUCESSO${NC}"
    count=$(echo $response | grep -o '"id":' | wc -l)
    echo "   ‚Üí Encontrou $count ofertas"
    
    # Extrair primeira oferta
    first_offer=$(echo $response | grep -o '"score":[0-9.]*' | head -1 | cut -d':' -f2)
    echo "   ‚Üí Melhor score: $first_offer"
else
    echo -e "   ${RED}‚úó FALHOU${NC}"
    echo "   Resposta: $response"
fi

echo ""

# Teste 2: Busca ida e volta
echo -e "${YELLOW}2. Busca Ida e Volta - CWB ‚Üí GRU${NC}"
echo "   Par√¢metros: origem=CWB, destino=GRU, ida=2025-12-10, volta=2025-12-15"
echo ""

response=$(curl -s -X POST http://localhost:8000/api/v1/search \
  -H "Content-Type: application/json" \
  -d '{
    "origin": "CWB",
    "destination": "GRU",
    "out_date": "2025-12-10", 
    "ret_date": "2025-12-15",
    "pax": {"adults": 1},
    "cabin": "ECONOMY"
  }')

if [[ $response == *"ranked"* ]]; then
    echo -e "   ${GREEN}‚úì SUCESSO${NC}"
    count=$(echo $response | grep -o '"id":' | wc -l)
    echo "   ‚Üí Encontrou $count ofertas"
else
    echo -e "   ${RED}‚úó FALHOU${NC}"
fi

echo ""

# Teste 3: M√∫ltiplos passageiros
echo -e "${YELLOW}3. M√∫ltiplos Passageiros - BSB ‚Üí FOR${NC}"
echo "   Par√¢metros: 2 adultos + 1 crian√ßa, classe executiva"
echo ""

response=$(curl -s -X POST http://localhost:8000/api/v1/search \
  -H "Content-Type: application/json" \
  -d '{
    "origin": "BSB",
    "destination": "FOR",
    "out_date": "2025-12-20",
    "pax": {"adults": 2, "children": 1},
    "cabin": "BUSINESS"
  }')

if [[ $response == *"ranked"* ]]; then
    echo -e "   ${GREEN}‚úì SUCESSO${NC}"
    count=$(echo $response | grep -o '"id":' | wc -l)
    echo "   ‚Üí Encontrou $count ofertas"
else
    echo -e "   ${RED}‚úó FALHOU${NC}"
fi

echo ""

# Teste 4: Teste com erro (formato inv√°lido)
echo -e "${YELLOW}4. Teste de Valida√ß√£o - Formato Inv√°lido${NC}"
echo "   Par√¢metros: origem inv√°lida (deve dar erro 422)"
echo ""

response=$(curl -s -X POST http://localhost:8000/api/v1/search \
  -H "Content-Type: application/json" \
  -d '{
    "origin": "INVALID",
    "destination": "GRU",
    "out_date": "2025-12-15",
    "passengers": 1
  }')

if [[ $response == *"422"* ]] || [[ $response == *"validation"* ]] || [[ $response == *"detail"* ]]; then
    echo -e "   ${GREEN}‚úì ERRO ESPERADO (valida√ß√£o funcionando)${NC}"
else
    echo -e "   ${RED}‚úó DEVERIA DAR ERRO${NC}"
fi

echo ""
echo "================================"
echo -e "${BLUE}üìä RESUMO DOS TESTES${NC}"
echo "================================"
echo ""
echo -e "${GREEN}‚úÖ FORMATO CORRETO QUE FUNCIONA:${NC}"
echo ""
echo "curl -X POST http://localhost:8000/api/v1/search \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"origin\": \"GRU\","
echo "    \"destination\": \"REC\","
echo "    \"out_date\": \"2025-12-15\","
echo "    \"pax\": {\"adults\": 1},"
echo "    \"cabin\": \"ECONOMY\""
echo "  }'"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è CAMPOS OBRIGAT√ìRIOS:${NC}"
echo "  ‚Ä¢ origin: C√≥digo IATA (3 letras mai√∫sculas)"
echo "  ‚Ä¢ destination: C√≥digo IATA (3 letras mai√∫sculas)" 
echo "  ‚Ä¢ out_date: Data no formato YYYY-MM-DD"
echo "  ‚Ä¢ pax: Objeto com adults (m√≠nimo 1)"
echo ""
echo -e "${BLUE}üîß CAMPOS OPCIONAIS:${NC}"
echo "  ‚Ä¢ ret_date: Data de volta (ida e volta)"
echo "  ‚Ä¢ cabin: ECONOMY, BUSINESS, FIRST"
echo "  ‚Ä¢ pax.children: N√∫mero de crian√ßas"
echo "  ‚Ä¢ pax.infants: N√∫mero de beb√™s"
echo ""
echo -e "${GREEN}üåê TESTE NO FRONTEND:${NC}"
echo "  ‚Üí http://localhost:3000"
echo ""